// This file is generated by rust-protobuf 2.0.4. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct Record {
    // message fields
    pub row: ::std::string::String,
    pub column: ::std::string::String,
    pub timestamp: u64,
    pub data: ::std::vec::Vec<u8>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl Record {
    pub fn new() -> Record {
        ::std::default::Default::default()
    }

    // string row = 1;

    pub fn clear_row(&mut self) {
        self.row.clear();
    }

    // Param is passed by value, moved
    pub fn set_row(&mut self, v: ::std::string::String) {
        self.row = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_row(&mut self) -> &mut ::std::string::String {
        &mut self.row
    }

    // Take field
    pub fn take_row(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.row, ::std::string::String::new())
    }

    pub fn get_row(&self) -> &str {
        &self.row
    }

    // string column = 2;

    pub fn clear_column(&mut self) {
        self.column.clear();
    }

    // Param is passed by value, moved
    pub fn set_column(&mut self, v: ::std::string::String) {
        self.column = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_column(&mut self) -> &mut ::std::string::String {
        &mut self.column
    }

    // Take field
    pub fn take_column(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.column, ::std::string::String::new())
    }

    pub fn get_column(&self) -> &str {
        &self.column
    }

    // uint64 timestamp = 3;

    pub fn clear_timestamp(&mut self) {
        self.timestamp = 0;
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: u64) {
        self.timestamp = v;
    }

    pub fn get_timestamp(&self) -> u64 {
        self.timestamp
    }

    // bytes data = 4;

    pub fn clear_data(&mut self) {
        self.data.clear();
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.data = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.data
    }

    // Take field
    pub fn take_data(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.data, ::std::vec::Vec::new())
    }

    pub fn get_data(&self) -> &[u8] {
        &self.data
    }
}

impl ::protobuf::Message for Record {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.row)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.column)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.timestamp = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.data)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.row.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.row);
        }
        if !self.column.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.column);
        }
        if self.timestamp != 0 {
            my_size += ::protobuf::rt::value_size(3, self.timestamp, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.data);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.row.is_empty() {
            os.write_string(1, &self.row)?;
        }
        if !self.column.is_empty() {
            os.write_string(2, &self.column)?;
        }
        if self.timestamp != 0 {
            os.write_uint64(3, self.timestamp)?;
        }
        if !self.data.is_empty() {
            os.write_bytes(4, &self.data)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Record {
        Record::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "row",
                    |m: &Record| { &m.row },
                    |m: &mut Record| { &mut m.row },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "column",
                    |m: &Record| { &m.column },
                    |m: &mut Record| { &mut m.column },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "timestamp",
                    |m: &Record| { &m.timestamp },
                    |m: &mut Record| { &mut m.timestamp },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "data",
                    |m: &Record| { &m.data },
                    |m: &mut Record| { &mut m.data },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Record>(
                    "Record",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Record {
        static mut instance: ::protobuf::lazy::Lazy<Record> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Record,
        };
        unsafe {
            instance.get(Record::new)
        }
    }
}

impl ::protobuf::Clear for Record {
    fn clear(&mut self) {
        self.clear_row();
        self.clear_column();
        self.clear_timestamp();
        self.clear_data();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Record {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Record {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ReadRequest {
    // message fields
    pub row: ::std::string::String,
    pub column: ::std::string::String,
    pub timestamp: u64,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl ReadRequest {
    pub fn new() -> ReadRequest {
        ::std::default::Default::default()
    }

    // string row = 1;

    pub fn clear_row(&mut self) {
        self.row.clear();
    }

    // Param is passed by value, moved
    pub fn set_row(&mut self, v: ::std::string::String) {
        self.row = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_row(&mut self) -> &mut ::std::string::String {
        &mut self.row
    }

    // Take field
    pub fn take_row(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.row, ::std::string::String::new())
    }

    pub fn get_row(&self) -> &str {
        &self.row
    }

    // string column = 2;

    pub fn clear_column(&mut self) {
        self.column.clear();
    }

    // Param is passed by value, moved
    pub fn set_column(&mut self, v: ::std::string::String) {
        self.column = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_column(&mut self) -> &mut ::std::string::String {
        &mut self.column
    }

    // Take field
    pub fn take_column(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.column, ::std::string::String::new())
    }

    pub fn get_column(&self) -> &str {
        &self.column
    }

    // uint64 timestamp = 3;

    pub fn clear_timestamp(&mut self) {
        self.timestamp = 0;
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: u64) {
        self.timestamp = v;
    }

    pub fn get_timestamp(&self) -> u64 {
        self.timestamp
    }
}

impl ::protobuf::Message for ReadRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.row)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.column)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.timestamp = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.row.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.row);
        }
        if !self.column.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.column);
        }
        if self.timestamp != 0 {
            my_size += ::protobuf::rt::value_size(3, self.timestamp, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.row.is_empty() {
            os.write_string(1, &self.row)?;
        }
        if !self.column.is_empty() {
            os.write_string(2, &self.column)?;
        }
        if self.timestamp != 0 {
            os.write_uint64(3, self.timestamp)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ReadRequest {
        ReadRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "row",
                    |m: &ReadRequest| { &m.row },
                    |m: &mut ReadRequest| { &mut m.row },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "column",
                    |m: &ReadRequest| { &m.column },
                    |m: &mut ReadRequest| { &mut m.column },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "timestamp",
                    |m: &ReadRequest| { &m.timestamp },
                    |m: &mut ReadRequest| { &mut m.timestamp },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ReadRequest>(
                    "ReadRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ReadRequest {
        static mut instance: ::protobuf::lazy::Lazy<ReadRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ReadRequest,
        };
        unsafe {
            instance.get(ReadRequest::new)
        }
    }
}

impl ::protobuf::Clear for ReadRequest {
    fn clear(&mut self) {
        self.clear_row();
        self.clear_column();
        self.clear_timestamp();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ReadRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ReadRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ReadResponse {
    // message fields
    pub found: bool,
    pub data: ::std::vec::Vec<u8>,
    pub timestamp: u64,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl ReadResponse {
    pub fn new() -> ReadResponse {
        ::std::default::Default::default()
    }

    // bool found = 1;

    pub fn clear_found(&mut self) {
        self.found = false;
    }

    // Param is passed by value, moved
    pub fn set_found(&mut self, v: bool) {
        self.found = v;
    }

    pub fn get_found(&self) -> bool {
        self.found
    }

    // bytes data = 2;

    pub fn clear_data(&mut self) {
        self.data.clear();
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.data = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.data
    }

    // Take field
    pub fn take_data(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.data, ::std::vec::Vec::new())
    }

    pub fn get_data(&self) -> &[u8] {
        &self.data
    }

    // uint64 timestamp = 3;

    pub fn clear_timestamp(&mut self) {
        self.timestamp = 0;
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: u64) {
        self.timestamp = v;
    }

    pub fn get_timestamp(&self) -> u64 {
        self.timestamp
    }
}

impl ::protobuf::Message for ReadResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.found = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.data)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.timestamp = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.found != false {
            my_size += 2;
        }
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.data);
        }
        if self.timestamp != 0 {
            my_size += ::protobuf::rt::value_size(3, self.timestamp, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.found != false {
            os.write_bool(1, self.found)?;
        }
        if !self.data.is_empty() {
            os.write_bytes(2, &self.data)?;
        }
        if self.timestamp != 0 {
            os.write_uint64(3, self.timestamp)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ReadResponse {
        ReadResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "found",
                    |m: &ReadResponse| { &m.found },
                    |m: &mut ReadResponse| { &mut m.found },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "data",
                    |m: &ReadResponse| { &m.data },
                    |m: &mut ReadResponse| { &mut m.data },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "timestamp",
                    |m: &ReadResponse| { &m.timestamp },
                    |m: &mut ReadResponse| { &mut m.timestamp },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ReadResponse>(
                    "ReadResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ReadResponse {
        static mut instance: ::protobuf::lazy::Lazy<ReadResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ReadResponse,
        };
        unsafe {
            instance.get(ReadResponse::new)
        }
    }
}

impl ::protobuf::Clear for ReadResponse {
    fn clear(&mut self) {
        self.clear_found();
        self.clear_data();
        self.clear_timestamp();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ReadResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ReadResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ReadRangeRequest {
    // message fields
    pub row: ::std::string::String,
    pub column_spec: ::std::string::String,
    pub column_min: ::std::string::String,
    pub column_max: ::std::string::String,
    pub max_records: u64,
    pub timestamp: u64,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl ReadRangeRequest {
    pub fn new() -> ReadRangeRequest {
        ::std::default::Default::default()
    }

    // string row = 1;

    pub fn clear_row(&mut self) {
        self.row.clear();
    }

    // Param is passed by value, moved
    pub fn set_row(&mut self, v: ::std::string::String) {
        self.row = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_row(&mut self) -> &mut ::std::string::String {
        &mut self.row
    }

    // Take field
    pub fn take_row(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.row, ::std::string::String::new())
    }

    pub fn get_row(&self) -> &str {
        &self.row
    }

    // string column_spec = 2;

    pub fn clear_column_spec(&mut self) {
        self.column_spec.clear();
    }

    // Param is passed by value, moved
    pub fn set_column_spec(&mut self, v: ::std::string::String) {
        self.column_spec = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_column_spec(&mut self) -> &mut ::std::string::String {
        &mut self.column_spec
    }

    // Take field
    pub fn take_column_spec(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.column_spec, ::std::string::String::new())
    }

    pub fn get_column_spec(&self) -> &str {
        &self.column_spec
    }

    // string column_min = 3;

    pub fn clear_column_min(&mut self) {
        self.column_min.clear();
    }

    // Param is passed by value, moved
    pub fn set_column_min(&mut self, v: ::std::string::String) {
        self.column_min = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_column_min(&mut self) -> &mut ::std::string::String {
        &mut self.column_min
    }

    // Take field
    pub fn take_column_min(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.column_min, ::std::string::String::new())
    }

    pub fn get_column_min(&self) -> &str {
        &self.column_min
    }

    // string column_max = 4;

    pub fn clear_column_max(&mut self) {
        self.column_max.clear();
    }

    // Param is passed by value, moved
    pub fn set_column_max(&mut self, v: ::std::string::String) {
        self.column_max = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_column_max(&mut self) -> &mut ::std::string::String {
        &mut self.column_max
    }

    // Take field
    pub fn take_column_max(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.column_max, ::std::string::String::new())
    }

    pub fn get_column_max(&self) -> &str {
        &self.column_max
    }

    // uint64 max_records = 5;

    pub fn clear_max_records(&mut self) {
        self.max_records = 0;
    }

    // Param is passed by value, moved
    pub fn set_max_records(&mut self, v: u64) {
        self.max_records = v;
    }

    pub fn get_max_records(&self) -> u64 {
        self.max_records
    }

    // uint64 timestamp = 6;

    pub fn clear_timestamp(&mut self) {
        self.timestamp = 0;
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: u64) {
        self.timestamp = v;
    }

    pub fn get_timestamp(&self) -> u64 {
        self.timestamp
    }
}

impl ::protobuf::Message for ReadRangeRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.row)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.column_spec)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.column_min)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.column_max)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.max_records = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.timestamp = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.row.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.row);
        }
        if !self.column_spec.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.column_spec);
        }
        if !self.column_min.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.column_min);
        }
        if !self.column_max.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.column_max);
        }
        if self.max_records != 0 {
            my_size += ::protobuf::rt::value_size(5, self.max_records, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.timestamp != 0 {
            my_size += ::protobuf::rt::value_size(6, self.timestamp, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.row.is_empty() {
            os.write_string(1, &self.row)?;
        }
        if !self.column_spec.is_empty() {
            os.write_string(2, &self.column_spec)?;
        }
        if !self.column_min.is_empty() {
            os.write_string(3, &self.column_min)?;
        }
        if !self.column_max.is_empty() {
            os.write_string(4, &self.column_max)?;
        }
        if self.max_records != 0 {
            os.write_uint64(5, self.max_records)?;
        }
        if self.timestamp != 0 {
            os.write_uint64(6, self.timestamp)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ReadRangeRequest {
        ReadRangeRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "row",
                    |m: &ReadRangeRequest| { &m.row },
                    |m: &mut ReadRangeRequest| { &mut m.row },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "column_spec",
                    |m: &ReadRangeRequest| { &m.column_spec },
                    |m: &mut ReadRangeRequest| { &mut m.column_spec },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "column_min",
                    |m: &ReadRangeRequest| { &m.column_min },
                    |m: &mut ReadRangeRequest| { &mut m.column_min },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "column_max",
                    |m: &ReadRangeRequest| { &m.column_max },
                    |m: &mut ReadRangeRequest| { &mut m.column_max },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "max_records",
                    |m: &ReadRangeRequest| { &m.max_records },
                    |m: &mut ReadRangeRequest| { &mut m.max_records },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "timestamp",
                    |m: &ReadRangeRequest| { &m.timestamp },
                    |m: &mut ReadRangeRequest| { &mut m.timestamp },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ReadRangeRequest>(
                    "ReadRangeRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ReadRangeRequest {
        static mut instance: ::protobuf::lazy::Lazy<ReadRangeRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ReadRangeRequest,
        };
        unsafe {
            instance.get(ReadRangeRequest::new)
        }
    }
}

impl ::protobuf::Clear for ReadRangeRequest {
    fn clear(&mut self) {
        self.clear_row();
        self.clear_column_spec();
        self.clear_column_min();
        self.clear_column_max();
        self.clear_max_records();
        self.clear_timestamp();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ReadRangeRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ReadRangeRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ReadRangeResponse {
    // message fields
    pub error: bool,
    pub error_message: ::std::string::String,
    pub records: ::protobuf::RepeatedField<Record>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl ReadRangeResponse {
    pub fn new() -> ReadRangeResponse {
        ::std::default::Default::default()
    }

    // bool error = 1;

    pub fn clear_error(&mut self) {
        self.error = false;
    }

    // Param is passed by value, moved
    pub fn set_error(&mut self, v: bool) {
        self.error = v;
    }

    pub fn get_error(&self) -> bool {
        self.error
    }

    // string error_message = 2;

    pub fn clear_error_message(&mut self) {
        self.error_message.clear();
    }

    // Param is passed by value, moved
    pub fn set_error_message(&mut self, v: ::std::string::String) {
        self.error_message = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_error_message(&mut self) -> &mut ::std::string::String {
        &mut self.error_message
    }

    // Take field
    pub fn take_error_message(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.error_message, ::std::string::String::new())
    }

    pub fn get_error_message(&self) -> &str {
        &self.error_message
    }

    // repeated .Record records = 3;

    pub fn clear_records(&mut self) {
        self.records.clear();
    }

    // Param is passed by value, moved
    pub fn set_records(&mut self, v: ::protobuf::RepeatedField<Record>) {
        self.records = v;
    }

    // Mutable pointer to the field.
    pub fn mut_records(&mut self) -> &mut ::protobuf::RepeatedField<Record> {
        &mut self.records
    }

    // Take field
    pub fn take_records(&mut self) -> ::protobuf::RepeatedField<Record> {
        ::std::mem::replace(&mut self.records, ::protobuf::RepeatedField::new())
    }

    pub fn get_records(&self) -> &[Record] {
        &self.records
    }
}

impl ::protobuf::Message for ReadRangeResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.records {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.error = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.error_message)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.records)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.error != false {
            my_size += 2;
        }
        if !self.error_message.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.error_message);
        }
        for value in &self.records {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.error != false {
            os.write_bool(1, self.error)?;
        }
        if !self.error_message.is_empty() {
            os.write_string(2, &self.error_message)?;
        }
        for v in &self.records {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ReadRangeResponse {
        ReadRangeResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "error",
                    |m: &ReadRangeResponse| { &m.error },
                    |m: &mut ReadRangeResponse| { &mut m.error },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "error_message",
                    |m: &ReadRangeResponse| { &m.error_message },
                    |m: &mut ReadRangeResponse| { &mut m.error_message },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Record>>(
                    "records",
                    |m: &ReadRangeResponse| { &m.records },
                    |m: &mut ReadRangeResponse| { &mut m.records },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ReadRangeResponse>(
                    "ReadRangeResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ReadRangeResponse {
        static mut instance: ::protobuf::lazy::Lazy<ReadRangeResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ReadRangeResponse,
        };
        unsafe {
            instance.get(ReadRangeResponse::new)
        }
    }
}

impl ::protobuf::Clear for ReadRangeResponse {
    fn clear(&mut self) {
        self.clear_error();
        self.clear_error_message();
        self.clear_records();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ReadRangeResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ReadRangeResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct WriteRequest {
    // message fields
    pub row: ::std::string::String,
    pub column: ::std::string::String,
    pub timestamp: u64,
    pub data: ::std::vec::Vec<u8>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl WriteRequest {
    pub fn new() -> WriteRequest {
        ::std::default::Default::default()
    }

    // string row = 1;

    pub fn clear_row(&mut self) {
        self.row.clear();
    }

    // Param is passed by value, moved
    pub fn set_row(&mut self, v: ::std::string::String) {
        self.row = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_row(&mut self) -> &mut ::std::string::String {
        &mut self.row
    }

    // Take field
    pub fn take_row(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.row, ::std::string::String::new())
    }

    pub fn get_row(&self) -> &str {
        &self.row
    }

    // string column = 2;

    pub fn clear_column(&mut self) {
        self.column.clear();
    }

    // Param is passed by value, moved
    pub fn set_column(&mut self, v: ::std::string::String) {
        self.column = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_column(&mut self) -> &mut ::std::string::String {
        &mut self.column
    }

    // Take field
    pub fn take_column(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.column, ::std::string::String::new())
    }

    pub fn get_column(&self) -> &str {
        &self.column
    }

    // uint64 timestamp = 3;

    pub fn clear_timestamp(&mut self) {
        self.timestamp = 0;
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: u64) {
        self.timestamp = v;
    }

    pub fn get_timestamp(&self) -> u64 {
        self.timestamp
    }

    // bytes data = 4;

    pub fn clear_data(&mut self) {
        self.data.clear();
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.data = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.data
    }

    // Take field
    pub fn take_data(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.data, ::std::vec::Vec::new())
    }

    pub fn get_data(&self) -> &[u8] {
        &self.data
    }
}

impl ::protobuf::Message for WriteRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.row)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.column)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.timestamp = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.data)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.row.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.row);
        }
        if !self.column.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.column);
        }
        if self.timestamp != 0 {
            my_size += ::protobuf::rt::value_size(3, self.timestamp, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.data);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.row.is_empty() {
            os.write_string(1, &self.row)?;
        }
        if !self.column.is_empty() {
            os.write_string(2, &self.column)?;
        }
        if self.timestamp != 0 {
            os.write_uint64(3, self.timestamp)?;
        }
        if !self.data.is_empty() {
            os.write_bytes(4, &self.data)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> WriteRequest {
        WriteRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "row",
                    |m: &WriteRequest| { &m.row },
                    |m: &mut WriteRequest| { &mut m.row },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "column",
                    |m: &WriteRequest| { &m.column },
                    |m: &mut WriteRequest| { &mut m.column },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "timestamp",
                    |m: &WriteRequest| { &m.timestamp },
                    |m: &mut WriteRequest| { &mut m.timestamp },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "data",
                    |m: &WriteRequest| { &m.data },
                    |m: &mut WriteRequest| { &mut m.data },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<WriteRequest>(
                    "WriteRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static WriteRequest {
        static mut instance: ::protobuf::lazy::Lazy<WriteRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const WriteRequest,
        };
        unsafe {
            instance.get(WriteRequest::new)
        }
    }
}

impl ::protobuf::Clear for WriteRequest {
    fn clear(&mut self) {
        self.clear_row();
        self.clear_column();
        self.clear_timestamp();
        self.clear_data();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for WriteRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for WriteRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct WriteResponse {
    // message fields
    pub timestamp: u64,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl WriteResponse {
    pub fn new() -> WriteResponse {
        ::std::default::Default::default()
    }

    // uint64 timestamp = 1;

    pub fn clear_timestamp(&mut self) {
        self.timestamp = 0;
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: u64) {
        self.timestamp = v;
    }

    pub fn get_timestamp(&self) -> u64 {
        self.timestamp
    }
}

impl ::protobuf::Message for WriteResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.timestamp = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.timestamp != 0 {
            my_size += ::protobuf::rt::value_size(1, self.timestamp, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.timestamp != 0 {
            os.write_uint64(1, self.timestamp)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> WriteResponse {
        WriteResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "timestamp",
                    |m: &WriteResponse| { &m.timestamp },
                    |m: &mut WriteResponse| { &mut m.timestamp },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<WriteResponse>(
                    "WriteResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static WriteResponse {
        static mut instance: ::protobuf::lazy::Lazy<WriteResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const WriteResponse,
        };
        unsafe {
            instance.get(WriteResponse::new)
        }
    }
}

impl ::protobuf::Clear for WriteResponse {
    fn clear(&mut self) {
        self.clear_timestamp();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for WriteResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for WriteResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DeleteRequest {
    // message fields
    pub row: ::std::string::String,
    pub column: ::std::string::String,
    pub data: ::std::vec::Vec<u8>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl DeleteRequest {
    pub fn new() -> DeleteRequest {
        ::std::default::Default::default()
    }

    // string row = 1;

    pub fn clear_row(&mut self) {
        self.row.clear();
    }

    // Param is passed by value, moved
    pub fn set_row(&mut self, v: ::std::string::String) {
        self.row = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_row(&mut self) -> &mut ::std::string::String {
        &mut self.row
    }

    // Take field
    pub fn take_row(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.row, ::std::string::String::new())
    }

    pub fn get_row(&self) -> &str {
        &self.row
    }

    // string column = 2;

    pub fn clear_column(&mut self) {
        self.column.clear();
    }

    // Param is passed by value, moved
    pub fn set_column(&mut self, v: ::std::string::String) {
        self.column = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_column(&mut self) -> &mut ::std::string::String {
        &mut self.column
    }

    // Take field
    pub fn take_column(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.column, ::std::string::String::new())
    }

    pub fn get_column(&self) -> &str {
        &self.column
    }

    // bytes data = 3;

    pub fn clear_data(&mut self) {
        self.data.clear();
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.data = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.data
    }

    // Take field
    pub fn take_data(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.data, ::std::vec::Vec::new())
    }

    pub fn get_data(&self) -> &[u8] {
        &self.data
    }
}

impl ::protobuf::Message for DeleteRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.row)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.column)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.data)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.row.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.row);
        }
        if !self.column.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.column);
        }
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.data);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.row.is_empty() {
            os.write_string(1, &self.row)?;
        }
        if !self.column.is_empty() {
            os.write_string(2, &self.column)?;
        }
        if !self.data.is_empty() {
            os.write_bytes(3, &self.data)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DeleteRequest {
        DeleteRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "row",
                    |m: &DeleteRequest| { &m.row },
                    |m: &mut DeleteRequest| { &mut m.row },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "column",
                    |m: &DeleteRequest| { &m.column },
                    |m: &mut DeleteRequest| { &mut m.column },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "data",
                    |m: &DeleteRequest| { &m.data },
                    |m: &mut DeleteRequest| { &mut m.data },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<DeleteRequest>(
                    "DeleteRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static DeleteRequest {
        static mut instance: ::protobuf::lazy::Lazy<DeleteRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const DeleteRequest,
        };
        unsafe {
            instance.get(DeleteRequest::new)
        }
    }
}

impl ::protobuf::Clear for DeleteRequest {
    fn clear(&mut self) {
        self.clear_row();
        self.clear_column();
        self.clear_data();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DeleteRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeleteRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DeleteResponse {
    // message fields
    pub timestamp: u64,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl DeleteResponse {
    pub fn new() -> DeleteResponse {
        ::std::default::Default::default()
    }

    // uint64 timestamp = 1;

    pub fn clear_timestamp(&mut self) {
        self.timestamp = 0;
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: u64) {
        self.timestamp = v;
    }

    pub fn get_timestamp(&self) -> u64 {
        self.timestamp
    }
}

impl ::protobuf::Message for DeleteResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.timestamp = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.timestamp != 0 {
            my_size += ::protobuf::rt::value_size(1, self.timestamp, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.timestamp != 0 {
            os.write_uint64(1, self.timestamp)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DeleteResponse {
        DeleteResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "timestamp",
                    |m: &DeleteResponse| { &m.timestamp },
                    |m: &mut DeleteResponse| { &mut m.timestamp },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<DeleteResponse>(
                    "DeleteResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static DeleteResponse {
        static mut instance: ::protobuf::lazy::Lazy<DeleteResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const DeleteResponse,
        };
        unsafe {
            instance.get(DeleteResponse::new)
        }
    }
}

impl ::protobuf::Clear for DeleteResponse {
    fn clear(&mut self) {
        self.clear_timestamp();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DeleteResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeleteResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ShardHintRequest {
    // message fields
    pub row: ::std::string::String,
    pub column_spec: ::std::string::String,
    pub column_min: ::std::string::String,
    pub column_max: ::std::string::String,
    pub max_shards: ::std::string::String,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl ShardHintRequest {
    pub fn new() -> ShardHintRequest {
        ::std::default::Default::default()
    }

    // string row = 1;

    pub fn clear_row(&mut self) {
        self.row.clear();
    }

    // Param is passed by value, moved
    pub fn set_row(&mut self, v: ::std::string::String) {
        self.row = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_row(&mut self) -> &mut ::std::string::String {
        &mut self.row
    }

    // Take field
    pub fn take_row(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.row, ::std::string::String::new())
    }

    pub fn get_row(&self) -> &str {
        &self.row
    }

    // string column_spec = 2;

    pub fn clear_column_spec(&mut self) {
        self.column_spec.clear();
    }

    // Param is passed by value, moved
    pub fn set_column_spec(&mut self, v: ::std::string::String) {
        self.column_spec = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_column_spec(&mut self) -> &mut ::std::string::String {
        &mut self.column_spec
    }

    // Take field
    pub fn take_column_spec(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.column_spec, ::std::string::String::new())
    }

    pub fn get_column_spec(&self) -> &str {
        &self.column_spec
    }

    // string column_min = 3;

    pub fn clear_column_min(&mut self) {
        self.column_min.clear();
    }

    // Param is passed by value, moved
    pub fn set_column_min(&mut self, v: ::std::string::String) {
        self.column_min = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_column_min(&mut self) -> &mut ::std::string::String {
        &mut self.column_min
    }

    // Take field
    pub fn take_column_min(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.column_min, ::std::string::String::new())
    }

    pub fn get_column_min(&self) -> &str {
        &self.column_min
    }

    // string column_max = 4;

    pub fn clear_column_max(&mut self) {
        self.column_max.clear();
    }

    // Param is passed by value, moved
    pub fn set_column_max(&mut self, v: ::std::string::String) {
        self.column_max = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_column_max(&mut self) -> &mut ::std::string::String {
        &mut self.column_max
    }

    // Take field
    pub fn take_column_max(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.column_max, ::std::string::String::new())
    }

    pub fn get_column_max(&self) -> &str {
        &self.column_max
    }

    // string max_shards = 5;

    pub fn clear_max_shards(&mut self) {
        self.max_shards.clear();
    }

    // Param is passed by value, moved
    pub fn set_max_shards(&mut self, v: ::std::string::String) {
        self.max_shards = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_max_shards(&mut self) -> &mut ::std::string::String {
        &mut self.max_shards
    }

    // Take field
    pub fn take_max_shards(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.max_shards, ::std::string::String::new())
    }

    pub fn get_max_shards(&self) -> &str {
        &self.max_shards
    }
}

impl ::protobuf::Message for ShardHintRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.row)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.column_spec)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.column_min)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.column_max)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.max_shards)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.row.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.row);
        }
        if !self.column_spec.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.column_spec);
        }
        if !self.column_min.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.column_min);
        }
        if !self.column_max.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.column_max);
        }
        if !self.max_shards.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.max_shards);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.row.is_empty() {
            os.write_string(1, &self.row)?;
        }
        if !self.column_spec.is_empty() {
            os.write_string(2, &self.column_spec)?;
        }
        if !self.column_min.is_empty() {
            os.write_string(3, &self.column_min)?;
        }
        if !self.column_max.is_empty() {
            os.write_string(4, &self.column_max)?;
        }
        if !self.max_shards.is_empty() {
            os.write_string(5, &self.max_shards)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ShardHintRequest {
        ShardHintRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "row",
                    |m: &ShardHintRequest| { &m.row },
                    |m: &mut ShardHintRequest| { &mut m.row },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "column_spec",
                    |m: &ShardHintRequest| { &m.column_spec },
                    |m: &mut ShardHintRequest| { &mut m.column_spec },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "column_min",
                    |m: &ShardHintRequest| { &m.column_min },
                    |m: &mut ShardHintRequest| { &mut m.column_min },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "column_max",
                    |m: &ShardHintRequest| { &m.column_max },
                    |m: &mut ShardHintRequest| { &mut m.column_max },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "max_shards",
                    |m: &ShardHintRequest| { &m.max_shards },
                    |m: &mut ShardHintRequest| { &mut m.max_shards },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ShardHintRequest>(
                    "ShardHintRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ShardHintRequest {
        static mut instance: ::protobuf::lazy::Lazy<ShardHintRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ShardHintRequest,
        };
        unsafe {
            instance.get(ShardHintRequest::new)
        }
    }
}

impl ::protobuf::Clear for ShardHintRequest {
    fn clear(&mut self) {
        self.clear_row();
        self.clear_column_spec();
        self.clear_column_min();
        self.clear_column_max();
        self.clear_max_shards();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ShardHintRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ShardHintRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ShardHintResponse {
    // message fields
    pub shards: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl ShardHintResponse {
    pub fn new() -> ShardHintResponse {
        ::std::default::Default::default()
    }

    // repeated string shards = 1;

    pub fn clear_shards(&mut self) {
        self.shards.clear();
    }

    // Param is passed by value, moved
    pub fn set_shards(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.shards = v;
    }

    // Mutable pointer to the field.
    pub fn mut_shards(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.shards
    }

    // Take field
    pub fn take_shards(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.shards, ::protobuf::RepeatedField::new())
    }

    pub fn get_shards(&self) -> &[::std::string::String] {
        &self.shards
    }
}

impl ::protobuf::Message for ShardHintResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.shards)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.shards {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.shards {
            os.write_string(1, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ShardHintResponse {
        ShardHintResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "shards",
                    |m: &ShardHintResponse| { &m.shards },
                    |m: &mut ShardHintResponse| { &mut m.shards },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ShardHintResponse>(
                    "ShardHintResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ShardHintResponse {
        static mut instance: ::protobuf::lazy::Lazy<ShardHintResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ShardHintResponse,
        };
        unsafe {
            instance.get(ShardHintResponse::new)
        }
    }
}

impl ::protobuf::Clear for ShardHintResponse {
    fn clear(&mut self) {
        self.clear_shards();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ShardHintResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ShardHintResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ReserveIDRequest {
    // message fields
    pub row: ::std::string::String,
    pub column: ::std::string::String,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl ReserveIDRequest {
    pub fn new() -> ReserveIDRequest {
        ::std::default::Default::default()
    }

    // string row = 1;

    pub fn clear_row(&mut self) {
        self.row.clear();
    }

    // Param is passed by value, moved
    pub fn set_row(&mut self, v: ::std::string::String) {
        self.row = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_row(&mut self) -> &mut ::std::string::String {
        &mut self.row
    }

    // Take field
    pub fn take_row(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.row, ::std::string::String::new())
    }

    pub fn get_row(&self) -> &str {
        &self.row
    }

    // string column = 2;

    pub fn clear_column(&mut self) {
        self.column.clear();
    }

    // Param is passed by value, moved
    pub fn set_column(&mut self, v: ::std::string::String) {
        self.column = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_column(&mut self) -> &mut ::std::string::String {
        &mut self.column
    }

    // Take field
    pub fn take_column(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.column, ::std::string::String::new())
    }

    pub fn get_column(&self) -> &str {
        &self.column
    }
}

impl ::protobuf::Message for ReserveIDRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.row)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.column)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.row.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.row);
        }
        if !self.column.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.column);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.row.is_empty() {
            os.write_string(1, &self.row)?;
        }
        if !self.column.is_empty() {
            os.write_string(2, &self.column)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ReserveIDRequest {
        ReserveIDRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "row",
                    |m: &ReserveIDRequest| { &m.row },
                    |m: &mut ReserveIDRequest| { &mut m.row },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "column",
                    |m: &ReserveIDRequest| { &m.column },
                    |m: &mut ReserveIDRequest| { &mut m.column },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ReserveIDRequest>(
                    "ReserveIDRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ReserveIDRequest {
        static mut instance: ::protobuf::lazy::Lazy<ReserveIDRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ReserveIDRequest,
        };
        unsafe {
            instance.get(ReserveIDRequest::new)
        }
    }
}

impl ::protobuf::Clear for ReserveIDRequest {
    fn clear(&mut self) {
        self.clear_row();
        self.clear_column();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ReserveIDRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ReserveIDRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ReserveIDResponse {
    // message fields
    pub id: u64,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl ReserveIDResponse {
    pub fn new() -> ReserveIDResponse {
        ::std::default::Default::default()
    }

    // uint64 id = 1;

    pub fn clear_id(&mut self) {
        self.id = 0;
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: u64) {
        self.id = v;
    }

    pub fn get_id(&self) -> u64 {
        self.id
    }
}

impl ::protobuf::Message for ReserveIDResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.id != 0 {
            os.write_uint64(1, self.id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ReserveIDResponse {
        ReserveIDResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "id",
                    |m: &ReserveIDResponse| { &m.id },
                    |m: &mut ReserveIDResponse| { &mut m.id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ReserveIDResponse>(
                    "ReserveIDResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ReserveIDResponse {
        static mut instance: ::protobuf::lazy::Lazy<ReserveIDResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ReserveIDResponse,
        };
        unsafe {
            instance.get(ReserveIDResponse::new)
        }
    }
}

impl ::protobuf::Clear for ReserveIDResponse {
    fn clear(&mut self) {
        self.clear_id();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ReserveIDResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ReserveIDResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\rservice.proto\"d\n\x06Record\x12\x10\n\x03row\x18\x01\x20\x01(\tR\
    \x03row\x12\x16\n\x06column\x18\x02\x20\x01(\tR\x06column\x12\x1c\n\ttim\
    estamp\x18\x03\x20\x01(\x04R\ttimestamp\x12\x12\n\x04data\x18\x04\x20\
    \x01(\x0cR\x04data\"U\n\x0bReadRequest\x12\x10\n\x03row\x18\x01\x20\x01(\
    \tR\x03row\x12\x16\n\x06column\x18\x02\x20\x01(\tR\x06column\x12\x1c\n\t\
    timestamp\x18\x03\x20\x01(\x04R\ttimestamp\"V\n\x0cReadResponse\x12\x14\
    \n\x05found\x18\x01\x20\x01(\x08R\x05found\x12\x12\n\x04data\x18\x02\x20\
    \x01(\x0cR\x04data\x12\x1c\n\ttimestamp\x18\x03\x20\x01(\x04R\ttimestamp\
    \"\xc2\x01\n\x10ReadRangeRequest\x12\x10\n\x03row\x18\x01\x20\x01(\tR\
    \x03row\x12\x1f\n\x0bcolumn_spec\x18\x02\x20\x01(\tR\ncolumnSpec\x12\x1d\
    \n\ncolumn_min\x18\x03\x20\x01(\tR\tcolumnMin\x12\x1d\n\ncolumn_max\x18\
    \x04\x20\x01(\tR\tcolumnMax\x12\x1f\n\x0bmax_records\x18\x05\x20\x01(\
    \x04R\nmaxRecords\x12\x1c\n\ttimestamp\x18\x06\x20\x01(\x04R\ttimestamp\
    \"q\n\x11ReadRangeResponse\x12\x14\n\x05error\x18\x01\x20\x01(\x08R\x05e\
    rror\x12#\n\rerror_message\x18\x02\x20\x01(\tR\x0cerrorMessage\x12!\n\
    \x07records\x18\x03\x20\x03(\x0b2\x07.RecordR\x07records\"j\n\x0cWriteRe\
    quest\x12\x10\n\x03row\x18\x01\x20\x01(\tR\x03row\x12\x16\n\x06column\
    \x18\x02\x20\x01(\tR\x06column\x12\x1c\n\ttimestamp\x18\x03\x20\x01(\x04\
    R\ttimestamp\x12\x12\n\x04data\x18\x04\x20\x01(\x0cR\x04data\"-\n\rWrite\
    Response\x12\x1c\n\ttimestamp\x18\x01\x20\x01(\x04R\ttimestamp\"M\n\rDel\
    eteRequest\x12\x10\n\x03row\x18\x01\x20\x01(\tR\x03row\x12\x16\n\x06colu\
    mn\x18\x02\x20\x01(\tR\x06column\x12\x12\n\x04data\x18\x03\x20\x01(\x0cR\
    \x04data\".\n\x0eDeleteResponse\x12\x1c\n\ttimestamp\x18\x01\x20\x01(\
    \x04R\ttimestamp\"\xa2\x01\n\x10ShardHintRequest\x12\x10\n\x03row\x18\
    \x01\x20\x01(\tR\x03row\x12\x1f\n\x0bcolumn_spec\x18\x02\x20\x01(\tR\nco\
    lumnSpec\x12\x1d\n\ncolumn_min\x18\x03\x20\x01(\tR\tcolumnMin\x12\x1d\n\
    \ncolumn_max\x18\x04\x20\x01(\tR\tcolumnMax\x12\x1d\n\nmax_shards\x18\
    \x05\x20\x01(\tR\tmaxShards\"+\n\x11ShardHintResponse\x12\x16\n\x06shard\
    s\x18\x01\x20\x03(\tR\x06shards\"<\n\x10ReserveIDRequest\x12\x10\n\x03ro\
    w\x18\x01\x20\x01(\tR\x03row\x12\x16\n\x06column\x18\x02\x20\x01(\tR\x06\
    column\"#\n\x11ReserveIDResponse\x12\x0e\n\x02id\x18\x01\x20\x01(\x04R\
    \x02id2\xaa\x02\n\x11LargeTableService\x12#\n\x04Read\x12\x0c.ReadReques\
    t\x1a\r.ReadResponse\x122\n\tReadRange\x12\x11.ReadRangeRequest\x1a\x12.\
    ReadRangeResponse\x122\n\tReserveID\x12\x11.ReserveIDRequest\x1a\x12.Res\
    erveIDResponse\x12&\n\x05Write\x12\r.WriteRequest\x1a\x0e.WriteResponse\
    \x12)\n\x06Delete\x12\x0e.DeleteRequest\x1a\x0f.DeleteResponse\x125\n\
    \x0cGetShardHint\x12\x11.ShardHintRequest\x1a\x12.ShardHintResponseJ\xd1\
    \x1b\n\x06\x12\x04\0\0Y\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\n\n\x02\
    \x04\0\x12\x04\x02\0\x07\x01\n\n\n\x03\x04\0\x01\x12\x03\x02\x08\x0e\n\
    \x0b\n\x04\x04\0\x02\0\x12\x03\x03\x02\x11\n\r\n\x05\x04\0\x02\0\x04\x12\
    \x04\x03\x02\x02\x10\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x03\x02\x08\n\
    \x0c\n\x05\x04\0\x02\0\x01\x12\x03\x03\t\x0c\n\x0c\n\x05\x04\0\x02\0\x03\
    \x12\x03\x03\x0f\x10\n\x0b\n\x04\x04\0\x02\x01\x12\x03\x04\x02\x14\n\r\n\
    \x05\x04\0\x02\x01\x04\x12\x04\x04\x02\x03\x11\n\x0c\n\x05\x04\0\x02\x01\
    \x05\x12\x03\x04\x02\x08\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x04\t\x0f\
    \n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x04\x12\x13\n\x0b\n\x04\x04\0\x02\
    \x02\x12\x03\x05\x02\x17\n\r\n\x05\x04\0\x02\x02\x04\x12\x04\x05\x02\x04\
    \x14\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03\x05\x02\x08\n\x0c\n\x05\x04\0\
    \x02\x02\x01\x12\x03\x05\t\x12\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\x05\
    \x15\x16\n\x0b\n\x04\x04\0\x02\x03\x12\x03\x06\x02\x11\n\r\n\x05\x04\0\
    \x02\x03\x04\x12\x04\x06\x02\x05\x17\n\x0c\n\x05\x04\0\x02\x03\x05\x12\
    \x03\x06\x02\x07\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03\x06\x08\x0c\n\x0c\
    \n\x05\x04\0\x02\x03\x03\x12\x03\x06\x0f\x10\n\n\n\x02\x04\x01\x12\x04\t\
    \0\r\x01\n\n\n\x03\x04\x01\x01\x12\x03\t\x08\x13\n\x0b\n\x04\x04\x01\x02\
    \0\x12\x03\n\x02\x11\n\r\n\x05\x04\x01\x02\0\x04\x12\x04\n\x02\t\x15\n\
    \x0c\n\x05\x04\x01\x02\0\x05\x12\x03\n\x02\x08\n\x0c\n\x05\x04\x01\x02\0\
    \x01\x12\x03\n\t\x0c\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\n\x0f\x10\n\
    \x0b\n\x04\x04\x01\x02\x01\x12\x03\x0b\x02\x14\n\r\n\x05\x04\x01\x02\x01\
    \x04\x12\x04\x0b\x02\n\x11\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03\x0b\
    \x02\x08\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\x0b\t\x0f\n\x0c\n\x05\
    \x04\x01\x02\x01\x03\x12\x03\x0b\x12\x13\n\x0b\n\x04\x04\x01\x02\x02\x12\
    \x03\x0c\x02\x17\n\r\n\x05\x04\x01\x02\x02\x04\x12\x04\x0c\x02\x0b\x14\n\
    \x0c\n\x05\x04\x01\x02\x02\x05\x12\x03\x0c\x02\x08\n\x0c\n\x05\x04\x01\
    \x02\x02\x01\x12\x03\x0c\t\x12\n\x0c\n\x05\x04\x01\x02\x02\x03\x12\x03\
    \x0c\x15\x16\n\n\n\x02\x04\x02\x12\x04\x0f\0\x13\x01\n\n\n\x03\x04\x02\
    \x01\x12\x03\x0f\x08\x14\n\x0b\n\x04\x04\x02\x02\0\x12\x03\x10\x02\x11\n\
    \r\n\x05\x04\x02\x02\0\x04\x12\x04\x10\x02\x0f\x16\n\x0c\n\x05\x04\x02\
    \x02\0\x05\x12\x03\x10\x02\x06\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03\x10\
    \x07\x0c\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03\x10\x0f\x10\n\x0b\n\x04\
    \x04\x02\x02\x01\x12\x03\x11\x02\x11\n\r\n\x05\x04\x02\x02\x01\x04\x12\
    \x04\x11\x02\x10\x11\n\x0c\n\x05\x04\x02\x02\x01\x05\x12\x03\x11\x02\x07\
    \n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03\x11\x08\x0c\n\x0c\n\x05\x04\x02\
    \x02\x01\x03\x12\x03\x11\x0f\x10\n\x0b\n\x04\x04\x02\x02\x02\x12\x03\x12\
    \x02\x17\n\r\n\x05\x04\x02\x02\x02\x04\x12\x04\x12\x02\x11\x11\n\x0c\n\
    \x05\x04\x02\x02\x02\x05\x12\x03\x12\x02\x08\n\x0c\n\x05\x04\x02\x02\x02\
    \x01\x12\x03\x12\t\x12\n\x0c\n\x05\x04\x02\x02\x02\x03\x12\x03\x12\x15\
    \x16\n\n\n\x02\x04\x03\x12\x04\x15\0&\x01\n\n\n\x03\x04\x03\x01\x12\x03\
    \x15\x08\x18\n\x0b\n\x04\x04\x03\x02\0\x12\x03\x16\x02\x11\n\r\n\x05\x04\
    \x03\x02\0\x04\x12\x04\x16\x02\x15\x1a\n\x0c\n\x05\x04\x03\x02\0\x05\x12\
    \x03\x16\x02\x08\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03\x16\t\x0c\n\x0c\n\
    \x05\x04\x03\x02\0\x03\x12\x03\x16\x0f\x10\n5\n\x04\x04\x03\x02\x01\x12\
    \x03\x19\x02\x19\x1a(\x20A\x20column\x20spec\x20to\x20adhere\x20to\x20(o\
    ptional).\n\n\r\n\x05\x04\x03\x02\x01\x04\x12\x04\x19\x02\x16\x11\n\x0c\
    \n\x05\x04\x03\x02\x01\x05\x12\x03\x19\x02\x08\n\x0c\n\x05\x04\x03\x02\
    \x01\x01\x12\x03\x19\t\x14\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\x03\x19\
    \x17\x18\nj\n\x04\x04\x03\x02\x02\x12\x03\x1d\x02\x18\x1a]\x20A\x20minim\
    um\x20and\x20maximum\x20key\x20to\x20read.\x20If\x20you\x20leave\x20them\
    \x20blank,\x20will\x20just\n\x20use\x20the\x20column\x20spec.\n\n\r\n\
    \x05\x04\x03\x02\x02\x04\x12\x04\x1d\x02\x19\x19\n\x0c\n\x05\x04\x03\x02\
    \x02\x05\x12\x03\x1d\x02\x08\n\x0c\n\x05\x04\x03\x02\x02\x01\x12\x03\x1d\
    \t\x13\n\x0c\n\x05\x04\x03\x02\x02\x03\x12\x03\x1d\x16\x17\n\x0b\n\x04\
    \x04\x03\x02\x03\x12\x03\x1e\x02\x18\n\r\n\x05\x04\x03\x02\x03\x04\x12\
    \x04\x1e\x02\x1d\x18\n\x0c\n\x05\x04\x03\x02\x03\x05\x12\x03\x1e\x02\x08\
    \n\x0c\n\x05\x04\x03\x02\x03\x01\x12\x03\x1e\t\x13\n\x0c\n\x05\x04\x03\
    \x02\x03\x03\x12\x03\x1e\x16\x17\n7\n\x04\x04\x03\x02\x04\x12\x03!\x02\
    \x19\x1a*\x20The\x20maximum\x20number\x20of\x20records\x20to\x20return.\
    \n\n\r\n\x05\x04\x03\x02\x04\x04\x12\x04!\x02\x1e\x18\n\x0c\n\x05\x04\
    \x03\x02\x04\x05\x12\x03!\x02\x08\n\x0c\n\x05\x04\x03\x02\x04\x01\x12\
    \x03!\t\x14\n\x0c\n\x05\x04\x03\x02\x04\x03\x12\x03!\x17\x18\nf\n\x04\
    \x04\x03\x02\x05\x12\x03%\x02\x17\x1aY\x20A\x20custom\x20timestamp\x20to\
    \x20use\x20when\x20filtering,\x20or\x20supply\x20zero\x20to\x20use\x20th\
    e\n\x20current\x20timestamp.\n\n\r\n\x05\x04\x03\x02\x05\x04\x12\x04%\
    \x02!\x19\n\x0c\n\x05\x04\x03\x02\x05\x05\x12\x03%\x02\x08\n\x0c\n\x05\
    \x04\x03\x02\x05\x01\x12\x03%\t\x12\n\x0c\n\x05\x04\x03\x02\x05\x03\x12\
    \x03%\x15\x16\n\n\n\x02\x04\x04\x12\x04(\0-\x01\n\n\n\x03\x04\x04\x01\
    \x12\x03(\x08\x19\n\x0b\n\x04\x04\x04\x02\0\x12\x03)\x02\x11\n\r\n\x05\
    \x04\x04\x02\0\x04\x12\x04)\x02(\x1b\n\x0c\n\x05\x04\x04\x02\0\x05\x12\
    \x03)\x02\x06\n\x0c\n\x05\x04\x04\x02\0\x01\x12\x03)\x07\x0c\n\x0c\n\x05\
    \x04\x04\x02\0\x03\x12\x03)\x0f\x10\n\x0b\n\x04\x04\x04\x02\x01\x12\x03*\
    \x02\x1b\n\r\n\x05\x04\x04\x02\x01\x04\x12\x04*\x02)\x11\n\x0c\n\x05\x04\
    \x04\x02\x01\x05\x12\x03*\x02\x08\n\x0c\n\x05\x04\x04\x02\x01\x01\x12\
    \x03*\t\x16\n\x0c\n\x05\x04\x04\x02\x01\x03\x12\x03*\x19\x1a\n\x0b\n\x04\
    \x04\x04\x02\x02\x12\x03,\x02\x1e\n\x0c\n\x05\x04\x04\x02\x02\x04\x12\
    \x03,\x02\n\n\x0c\n\x05\x04\x04\x02\x02\x06\x12\x03,\x0b\x11\n\x0c\n\x05\
    \x04\x04\x02\x02\x01\x12\x03,\x12\x19\n\x0c\n\x05\x04\x04\x02\x02\x03\
    \x12\x03,\x1c\x1d\n\n\n\x02\x04\x05\x12\x04/\04\x01\n\n\n\x03\x04\x05\
    \x01\x12\x03/\x08\x14\n\x0b\n\x04\x04\x05\x02\0\x12\x030\x02\x11\n\r\n\
    \x05\x04\x05\x02\0\x04\x12\x040\x02/\x16\n\x0c\n\x05\x04\x05\x02\0\x05\
    \x12\x030\x02\x08\n\x0c\n\x05\x04\x05\x02\0\x01\x12\x030\t\x0c\n\x0c\n\
    \x05\x04\x05\x02\0\x03\x12\x030\x0f\x10\n\x0b\n\x04\x04\x05\x02\x01\x12\
    \x031\x02\x14\n\r\n\x05\x04\x05\x02\x01\x04\x12\x041\x020\x11\n\x0c\n\
    \x05\x04\x05\x02\x01\x05\x12\x031\x02\x08\n\x0c\n\x05\x04\x05\x02\x01\
    \x01\x12\x031\t\x0f\n\x0c\n\x05\x04\x05\x02\x01\x03\x12\x031\x12\x13\n\
    \x0b\n\x04\x04\x05\x02\x02\x12\x032\x02\x17\n\r\n\x05\x04\x05\x02\x02\
    \x04\x12\x042\x021\x14\n\x0c\n\x05\x04\x05\x02\x02\x05\x12\x032\x02\x08\
    \n\x0c\n\x05\x04\x05\x02\x02\x01\x12\x032\t\x12\n\x0c\n\x05\x04\x05\x02\
    \x02\x03\x12\x032\x15\x16\n\x0b\n\x04\x04\x05\x02\x03\x12\x033\x02\x11\n\
    \r\n\x05\x04\x05\x02\x03\x04\x12\x043\x022\x17\n\x0c\n\x05\x04\x05\x02\
    \x03\x05\x12\x033\x02\x07\n\x0c\n\x05\x04\x05\x02\x03\x01\x12\x033\x08\
    \x0c\n\x0c\n\x05\x04\x05\x02\x03\x03\x12\x033\x0f\x10\n\t\n\x02\x04\x06\
    \x12\x036\0/\n\n\n\x03\x04\x06\x01\x12\x036\x08\x15\n\x0b\n\x04\x04\x06\
    \x02\0\x12\x036\x18-\n\x0c\n\x05\x04\x06\x02\0\x04\x12\x036\x18\x17\n\
    \x0c\n\x05\x04\x06\x02\0\x05\x12\x036\x18\x1e\n\x0c\n\x05\x04\x06\x02\0\
    \x01\x12\x036\x1f(\n\x0c\n\x05\x04\x06\x02\0\x03\x12\x036+,\n\n\n\x02\
    \x04\x07\x12\x048\0<\x01\n\n\n\x03\x04\x07\x01\x12\x038\x08\x15\n\x0b\n\
    \x04\x04\x07\x02\0\x12\x039\x02\x11\n\r\n\x05\x04\x07\x02\0\x04\x12\x049\
    \x028\x17\n\x0c\n\x05\x04\x07\x02\0\x05\x12\x039\x02\x08\n\x0c\n\x05\x04\
    \x07\x02\0\x01\x12\x039\t\x0c\n\x0c\n\x05\x04\x07\x02\0\x03\x12\x039\x0f\
    \x10\n\x0b\n\x04\x04\x07\x02\x01\x12\x03:\x02\x14\n\r\n\x05\x04\x07\x02\
    \x01\x04\x12\x04:\x029\x11\n\x0c\n\x05\x04\x07\x02\x01\x05\x12\x03:\x02\
    \x08\n\x0c\n\x05\x04\x07\x02\x01\x01\x12\x03:\t\x0f\n\x0c\n\x05\x04\x07\
    \x02\x01\x03\x12\x03:\x12\x13\n\x0b\n\x04\x04\x07\x02\x02\x12\x03;\x02\
    \x11\n\r\n\x05\x04\x07\x02\x02\x04\x12\x04;\x02:\x14\n\x0c\n\x05\x04\x07\
    \x02\x02\x05\x12\x03;\x02\x07\n\x0c\n\x05\x04\x07\x02\x02\x01\x12\x03;\
    \x08\x0c\n\x0c\n\x05\x04\x07\x02\x02\x03\x12\x03;\x0f\x10\n\t\n\x02\x04\
    \x08\x12\x03>\00\n\n\n\x03\x04\x08\x01\x12\x03>\x08\x16\n\x0b\n\x04\x04\
    \x08\x02\0\x12\x03>\x19.\n\x0c\n\x05\x04\x08\x02\0\x04\x12\x03>\x19\x18\
    \n\x0c\n\x05\x04\x08\x02\0\x05\x12\x03>\x19\x1f\n\x0c\n\x05\x04\x08\x02\
    \0\x01\x12\x03>\x20)\n\x0c\n\x05\x04\x08\x02\0\x03\x12\x03>,-\n\n\n\x02\
    \x04\t\x12\x04@\0G\x01\n\n\n\x03\x04\t\x01\x12\x03@\x08\x18\n\x0b\n\x04\
    \x04\t\x02\0\x12\x03A\x02\x11\n\r\n\x05\x04\t\x02\0\x04\x12\x04A\x02@\
    \x1a\n\x0c\n\x05\x04\t\x02\0\x05\x12\x03A\x02\x08\n\x0c\n\x05\x04\t\x02\
    \0\x01\x12\x03A\t\x0c\n\x0c\n\x05\x04\t\x02\0\x03\x12\x03A\x0f\x10\n\x0b\
    \n\x04\x04\t\x02\x01\x12\x03C\x02\x19\n\r\n\x05\x04\t\x02\x01\x04\x12\
    \x04C\x02A\x11\n\x0c\n\x05\x04\t\x02\x01\x05\x12\x03C\x02\x08\n\x0c\n\
    \x05\x04\t\x02\x01\x01\x12\x03C\t\x14\n\x0c\n\x05\x04\t\x02\x01\x03\x12\
    \x03C\x17\x18\n\x0b\n\x04\x04\t\x02\x02\x12\x03D\x02\x18\n\r\n\x05\x04\t\
    \x02\x02\x04\x12\x04D\x02C\x19\n\x0c\n\x05\x04\t\x02\x02\x05\x12\x03D\
    \x02\x08\n\x0c\n\x05\x04\t\x02\x02\x01\x12\x03D\t\x13\n\x0c\n\x05\x04\t\
    \x02\x02\x03\x12\x03D\x16\x17\n\x0b\n\x04\x04\t\x02\x03\x12\x03E\x02\x18\
    \n\r\n\x05\x04\t\x02\x03\x04\x12\x04E\x02D\x18\n\x0c\n\x05\x04\t\x02\x03\
    \x05\x12\x03E\x02\x08\n\x0c\n\x05\x04\t\x02\x03\x01\x12\x03E\t\x13\n\x0c\
    \n\x05\x04\t\x02\x03\x03\x12\x03E\x16\x17\n\x0b\n\x04\x04\t\x02\x04\x12\
    \x03F\x02\x18\n\r\n\x05\x04\t\x02\x04\x04\x12\x04F\x02E\x18\n\x0c\n\x05\
    \x04\t\x02\x04\x05\x12\x03F\x02\x08\n\x0c\n\x05\x04\t\x02\x04\x01\x12\
    \x03F\t\x13\n\x0c\n\x05\x04\t\x02\x04\x03\x12\x03F\x16\x17\n\t\n\x02\x04\
    \n\x12\x03I\09\n\n\n\x03\x04\n\x01\x12\x03I\x08\x19\n\x0b\n\x04\x04\n\
    \x02\0\x12\x03I\x1c7\n\x0c\n\x05\x04\n\x02\0\x04\x12\x03I\x1c$\n\x0c\n\
    \x05\x04\n\x02\0\x05\x12\x03I%+\n\x0c\n\x05\x04\n\x02\0\x01\x12\x03I,2\n\
    \x0c\n\x05\x04\n\x02\0\x03\x12\x03I56\n\n\n\x02\x04\x0b\x12\x04K\0N\x01\
    \n\n\n\x03\x04\x0b\x01\x12\x03K\x08\x18\n\x0b\n\x04\x04\x0b\x02\0\x12\
    \x03L\x02\x11\n\r\n\x05\x04\x0b\x02\0\x04\x12\x04L\x02K\x1a\n\x0c\n\x05\
    \x04\x0b\x02\0\x05\x12\x03L\x02\x08\n\x0c\n\x05\x04\x0b\x02\0\x01\x12\
    \x03L\t\x0c\n\x0c\n\x05\x04\x0b\x02\0\x03\x12\x03L\x0f\x10\n\x0b\n\x04\
    \x04\x0b\x02\x01\x12\x03M\x02\x14\n\r\n\x05\x04\x0b\x02\x01\x04\x12\x04M\
    \x02L\x11\n\x0c\n\x05\x04\x0b\x02\x01\x05\x12\x03M\x02\x08\n\x0c\n\x05\
    \x04\x0b\x02\x01\x01\x12\x03M\t\x0f\n\x0c\n\x05\x04\x0b\x02\x01\x03\x12\
    \x03M\x12\x13\n\t\n\x02\x04\x0c\x12\x03P\0,\n\n\n\x03\x04\x0c\x01\x12\
    \x03P\x08\x19\n\x0b\n\x04\x04\x0c\x02\0\x12\x03P\x1c*\n\x0c\n\x05\x04\
    \x0c\x02\0\x04\x12\x03P\x1c\x1b\n\x0c\n\x05\x04\x0c\x02\0\x05\x12\x03P\
    \x1c\"\n\x0c\n\x05\x04\x0c\x02\0\x01\x12\x03P#%\n\x0c\n\x05\x04\x0c\x02\
    \0\x03\x12\x03P()\n\n\n\x02\x06\0\x12\x04R\0Y\x01\n\n\n\x03\x06\0\x01\
    \x12\x03R\x08\x19\n\x0b\n\x04\x06\0\x02\0\x12\x03S\x02/\n\x0c\n\x05\x06\
    \0\x02\0\x01\x12\x03S\x06\n\n\x0c\n\x05\x06\0\x02\0\x02\x12\x03S\x0b\x16\
    \n\x0c\n\x05\x06\0\x02\0\x03\x12\x03S!-\n\x0b\n\x04\x06\0\x02\x01\x12\
    \x03T\x02>\n\x0c\n\x05\x06\0\x02\x01\x01\x12\x03T\x06\x0f\n\x0c\n\x05\
    \x06\0\x02\x01\x02\x12\x03T\x10\x20\n\x0c\n\x05\x06\0\x02\x01\x03\x12\
    \x03T+<\n\x0b\n\x04\x06\0\x02\x02\x12\x03U\x02>\n\x0c\n\x05\x06\0\x02\
    \x02\x01\x12\x03U\x06\x0f\n\x0c\n\x05\x06\0\x02\x02\x02\x12\x03U\x10\x20\
    \n\x0c\n\x05\x06\0\x02\x02\x03\x12\x03U+<\n\x0b\n\x04\x06\0\x02\x03\x12\
    \x03V\x022\n\x0c\n\x05\x06\0\x02\x03\x01\x12\x03V\x06\x0b\n\x0c\n\x05\
    \x06\0\x02\x03\x02\x12\x03V\x0c\x18\n\x0c\n\x05\x06\0\x02\x03\x03\x12\
    \x03V#0\n\x0b\n\x04\x06\0\x02\x04\x12\x03W\x025\n\x0c\n\x05\x06\0\x02\
    \x04\x01\x12\x03W\x06\x0c\n\x0c\n\x05\x06\0\x02\x04\x02\x12\x03W\r\x1a\n\
    \x0c\n\x05\x06\0\x02\x04\x03\x12\x03W%3\n\x0b\n\x04\x06\0\x02\x05\x12\
    \x03X\x02A\n\x0c\n\x05\x06\0\x02\x05\x01\x12\x03X\x06\x12\n\x0c\n\x05\
    \x06\0\x02\x05\x02\x12\x03X\x13#\n\x0c\n\x05\x06\0\x02\x05\x03\x12\x03X.\
    ?b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
