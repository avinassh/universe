// This file is generated by rust-protobuf 2.0.4. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct Record {
    // message fields
    pub deleted: bool,
    pub timestamp: u64,
    pub data: ::std::vec::Vec<u8>,
    pub row: ::std::string::String,
    pub col: ::std::string::String,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl Record {
    pub fn new() -> Record {
        ::std::default::Default::default()
    }

    // bool deleted = 1;

    pub fn clear_deleted(&mut self) {
        self.deleted = false;
    }

    // Param is passed by value, moved
    pub fn set_deleted(&mut self, v: bool) {
        self.deleted = v;
    }

    pub fn get_deleted(&self) -> bool {
        self.deleted
    }

    // uint64 timestamp = 2;

    pub fn clear_timestamp(&mut self) {
        self.timestamp = 0;
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: u64) {
        self.timestamp = v;
    }

    pub fn get_timestamp(&self) -> u64 {
        self.timestamp
    }

    // bytes data = 3;

    pub fn clear_data(&mut self) {
        self.data.clear();
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.data = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.data
    }

    // Take field
    pub fn take_data(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.data, ::std::vec::Vec::new())
    }

    pub fn get_data(&self) -> &[u8] {
        &self.data
    }

    // string row = 4;

    pub fn clear_row(&mut self) {
        self.row.clear();
    }

    // Param is passed by value, moved
    pub fn set_row(&mut self, v: ::std::string::String) {
        self.row = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_row(&mut self) -> &mut ::std::string::String {
        &mut self.row
    }

    // Take field
    pub fn take_row(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.row, ::std::string::String::new())
    }

    pub fn get_row(&self) -> &str {
        &self.row
    }

    // string col = 5;

    pub fn clear_col(&mut self) {
        self.col.clear();
    }

    // Param is passed by value, moved
    pub fn set_col(&mut self, v: ::std::string::String) {
        self.col = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_col(&mut self) -> &mut ::std::string::String {
        &mut self.col
    }

    // Take field
    pub fn take_col(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.col, ::std::string::String::new())
    }

    pub fn get_col(&self) -> &str {
        &self.col
    }
}

impl ::protobuf::Message for Record {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.deleted = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.timestamp = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.data)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.row)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.col)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.deleted != false {
            my_size += 2;
        }
        if self.timestamp != 0 {
            my_size += ::protobuf::rt::value_size(2, self.timestamp, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.data);
        }
        if !self.row.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.row);
        }
        if !self.col.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.col);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.deleted != false {
            os.write_bool(1, self.deleted)?;
        }
        if self.timestamp != 0 {
            os.write_uint64(2, self.timestamp)?;
        }
        if !self.data.is_empty() {
            os.write_bytes(3, &self.data)?;
        }
        if !self.row.is_empty() {
            os.write_string(4, &self.row)?;
        }
        if !self.col.is_empty() {
            os.write_string(5, &self.col)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Record {
        Record::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "deleted",
                    |m: &Record| { &m.deleted },
                    |m: &mut Record| { &mut m.deleted },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "timestamp",
                    |m: &Record| { &m.timestamp },
                    |m: &mut Record| { &mut m.timestamp },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "data",
                    |m: &Record| { &m.data },
                    |m: &mut Record| { &mut m.data },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "row",
                    |m: &Record| { &m.row },
                    |m: &mut Record| { &mut m.row },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "col",
                    |m: &Record| { &m.col },
                    |m: &mut Record| { &mut m.col },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Record>(
                    "Record",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Record {
        static mut instance: ::protobuf::lazy::Lazy<Record> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Record,
        };
        unsafe {
            instance.get(Record::new)
        }
    }
}

impl ::protobuf::Clear for Record {
    fn clear(&mut self) {
        self.clear_deleted();
        self.clear_timestamp();
        self.clear_data();
        self.clear_row();
        self.clear_col();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Record {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Record {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x10src/record.proto\"x\n\x06Record\x12\x18\n\x07deleted\x18\x01\x20\
    \x01(\x08R\x07deleted\x12\x1c\n\ttimestamp\x18\x02\x20\x01(\x04R\ttimest\
    amp\x12\x12\n\x04data\x18\x03\x20\x01(\x0cR\x04data\x12\x10\n\x03row\x18\
    \x04\x20\x01(\tR\x03row\x12\x10\n\x03col\x18\x05\x20\x01(\tR\x03colJ\x88\
    \x03\n\x06\x12\x04\0\0\t\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\n\n\x02\
    \x04\0\x12\x04\x02\0\t\x01\n\n\n\x03\x04\0\x01\x12\x03\x02\x08\x0e\n\x0b\
    \n\x04\x04\0\x02\0\x12\x03\x03\x02\x13\n\r\n\x05\x04\0\x02\0\x04\x12\x04\
    \x03\x02\x02\x10\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x03\x02\x06\n\x0c\n\
    \x05\x04\0\x02\0\x01\x12\x03\x03\x07\x0e\n\x0c\n\x05\x04\0\x02\0\x03\x12\
    \x03\x03\x11\x12\n\x0b\n\x04\x04\0\x02\x01\x12\x03\x04\x02\x17\n\r\n\x05\
    \x04\0\x02\x01\x04\x12\x04\x04\x02\x03\x13\n\x0c\n\x05\x04\0\x02\x01\x05\
    \x12\x03\x04\x02\x08\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x04\t\x12\n\
    \x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x04\x15\x16\n\x0b\n\x04\x04\0\x02\
    \x02\x12\x03\x05\x02\x11\n\r\n\x05\x04\0\x02\x02\x04\x12\x04\x05\x02\x04\
    \x17\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03\x05\x02\x07\n\x0c\n\x05\x04\0\
    \x02\x02\x01\x12\x03\x05\x08\x0c\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\
    \x05\x0f\x10\n\x0b\n\x04\x04\0\x02\x03\x12\x03\x07\x02\x11\n\r\n\x05\x04\
    \0\x02\x03\x04\x12\x04\x07\x02\x05\x11\n\x0c\n\x05\x04\0\x02\x03\x05\x12\
    \x03\x07\x02\x08\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03\x07\t\x0c\n\x0c\n\
    \x05\x04\0\x02\x03\x03\x12\x03\x07\x0f\x10\n\x0b\n\x04\x04\0\x02\x04\x12\
    \x03\x08\x02\x11\n\r\n\x05\x04\0\x02\x04\x04\x12\x04\x08\x02\x07\x11\n\
    \x0c\n\x05\x04\0\x02\x04\x05\x12\x03\x08\x02\x08\n\x0c\n\x05\x04\0\x02\
    \x04\x01\x12\x03\x08\t\x0c\n\x0c\n\x05\x04\0\x02\x04\x03\x12\x03\x08\x0f\
    \x10b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
