syntax = "proto3";

enum FileType {
  UNKNOWN = 0;
  RUST = 1;
  PROTO = 2;
  BINARY = 3;
  JAVASCRIPT = 4;
  HTML = 5;
  BAZEL = 6;
  PYTHON = 7;
  C = 8;
  CPP = 9;
}

message QueryKeyword {
  string keyword = 1;

  // If it is a search for a specific definition
  bool is_definition = 2;

  // If it's a required filename prefix
  bool is_prefix = 3;

  bool is_language = 4;

  // Anywhere inside filename
  bool is_filename = 5;
}

message Query {
  string query = 1;
  repeated QueryKeyword keywords = 2;
}

message ExtractedKeyword {
  string keyword = 1;
  uint64 occurrences = 2;
  bool normalized = 3;

  // Border match indicates that the match started at the edge of a keyword,
  // e.g. `colin` matching into `colIndex`.
  bool border_match = 4;

  // Complete match indicates that the match started at the edge of a keyword
  // and ended at the edge of a keyword, e.g. `colIndex` matching `col_index`
  bool complete_match = 5;
}

message KeywordMatch {
  uint64 file_id = 1;
  uint64 occurrences = 2;
  bool normalized = 3;
}

message KeywordMatches { repeated uint64 matches = 1; }
message DefinitionMatches { repeated SymbolDefinition matches = 1; }

message File {
  string filename = 1;
  string content = 2;
  bool is_binary = 3;
  bool is_directory = 4;
  bool is_ugly = 5;
  FileType file_type = 6;

  // If it's actually a directory, the filenames of the children
  repeated string child_directories = 7;
  repeated string child_files = 8;

  // If the file only contains tests
  bool is_test = 9;

  repeated string imports = 10;
  repeated string dependents = 11;

  float page_rank = 12;

  repeated SymbolDefinition symbols = 13;
}

message Span {
  uint64 line = 1;
  uint64 offset = 2;
  uint64 length = 3;
  uint32 keyword_index = 4;
  bool is_border_match = 5;
  bool is_complete_match = 6;
}

message Candidate {
  string filename = 1;
  repeated ExtractedKeyword matched_keywords = 2;

  float score = 3;

  bool keyword_matched_filename = 4;
  bool query_in_filename = 5;
  bool exactly_matched_filename = 6;
  uint32 filename_match_position = 7;

  uint32 snippet_starting_line = 8;
  repeated string snippet = 9;

  bool is_ugly = 10;
  FileType file_type = 11;

  repeated SymbolDefinition matched_definitions = 12;

  uint32 jump_to_line = 13;

  uint32 keyword_possible_match_mask = 14;
  uint32 keyword_definite_match_mask = 15;

  repeated Span spans = 16;

  uint32 filename_query_matches = 17;
  bool filename_keywords_matched_in_order = 18;
  float filename_match_coverage = 19;

  repeated string child_files = 20;
  repeated string child_directories = 21;

  bool is_directory = 22;
  bool is_test = 23;

  float page_rank = 24;

  uint32 keyword_complete_match_mask = 25;
  uint32 keyword_border_match_mask = 26;
}

enum SymbolType {
  VARIABLE = 0;
  FUNCTION = 1;
  STRUCTURE = 2;
  TRAIT = 3;
}

enum Error {
  NONE = 0;
  AUTHENTICATION = 1;
}

message Target {
  string name = 1;
  string canonical_name = 2;
  repeated string files = 3;
  repeated string dependencies = 4;
}

message SymbolDefinition {
  string symbol = 1;
  string filename = 2;
  uint32 line_number = 3;
  SymbolType symbol_type = 4;
  uint32 end_line_number = 5;
}

message ImportDefinition {
  string from_filename = 1;
  string to_filename = 2;
}

enum EntityKind {
  E_UNKNOWN = 0;
  E_TARGET = 1;
  E_FUNCTION = 2;
  E_STRUCT = 3;
  E_PROJECT = 4;
  E_TRAIT = 5;
}

message EntityInfo {
  string name = 1;
  EntityKind kind = 2;
  repeated string keywords = 3;
  string file = 4;
  uint32 line_number = 5;
  FileType file_type = 6;
  string description = 7;
  repeated EntitySubInfo subinfos = 8;
}

message EntitySubInfo {
  string name = 1;
  repeated string item_texts = 2;
  repeated string links = 3;
}

message SearchRequest {
  string query = 1;
  string token = 2;
}
message SearchResponse {
  repeated Candidate candidates = 1;
  Error error = 2;

  repeated string languages = 3;
  repeated string prefixes = 4;
}

message SuggestRequest {
  string prefix = 1;
  string token = 2;
}
message SuggestResponse {
  repeated string suggestions = 1;
  Error error = 2;
}

service SearchService {
  rpc Search(SearchRequest) returns (SearchResponse);
  rpc Suggest(SuggestRequest) returns (SuggestResponse);
}
